// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/steve-nzr/goff/internal/domain/interfaces/repositories (interfaces: Connection,Character,Account,GameCharacter)

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	gomock "github.com/golang/mock/gomock"
	customtypes "github.com/steve-nzr/goff/internal/domain/customtypes"
	entities "github.com/steve-nzr/goff/internal/domain/entities"
	interfaces "github.com/steve-nzr/goff/internal/domain/interfaces"
	net "net"
	reflect "reflect"
)

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// DeleteByConn mocks base method
func (m *MockConnection) DeleteByConn(arg0 net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByConn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByConn indicates an expected call of DeleteByConn
func (mr *MockConnectionMockRecorder) DeleteByConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByConn", reflect.TypeOf((*MockConnection)(nil).DeleteByConn), arg0)
}

// GetByCharacterID mocks base method
func (m *MockConnection) GetByCharacterID(arg0 customtypes.ID) (*entities.NetClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCharacterID", arg0)
	ret0, _ := ret[0].(*entities.NetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCharacterID indicates an expected call of GetByCharacterID
func (mr *MockConnectionMockRecorder) GetByCharacterID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCharacterID", reflect.TypeOf((*MockConnection)(nil).GetByCharacterID), arg0)
}

// GetByConn mocks base method
func (m *MockConnection) GetByConn(arg0 net.Conn) (*entities.NetClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByConn", arg0)
	ret0, _ := ret[0].(*entities.NetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByConn indicates an expected call of GetByConn
func (mr *MockConnectionMockRecorder) GetByConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByConn", reflect.TypeOf((*MockConnection)(nil).GetByConn), arg0)
}

// GetByID mocks base method
func (m *MockConnection) GetByID(arg0 customtypes.ID) (*entities.NetClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entities.NetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockConnectionMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockConnection)(nil).GetByID), arg0)
}

// Insert mocks base method
func (m *MockConnection) Insert(arg0 *entities.NetClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockConnectionMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockConnection)(nil).Insert), arg0)
}

// UpdateCharacterID mocks base method
func (m *MockConnection) UpdateCharacterID(arg0 *entities.NetClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCharacterID", arg0)
}

// UpdateCharacterID indicates an expected call of UpdateCharacterID
func (mr *MockConnectionMockRecorder) UpdateCharacterID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharacterID", reflect.TypeOf((*MockConnection)(nil).UpdateCharacterID), arg0)
}

// MockCharacter is a mock of Character interface
type MockCharacter struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterMockRecorder
}

// MockCharacterMockRecorder is the mock recorder for MockCharacter
type MockCharacterMockRecorder struct {
	mock *MockCharacter
}

// NewMockCharacter creates a new mock instance
func NewMockCharacter(ctrl *gomock.Controller) *MockCharacter {
	mock := &MockCharacter{ctrl: ctrl}
	mock.recorder = &MockCharacterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCharacter) EXPECT() *MockCharacterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCharacter) Get(arg0 customtypes.ID) (*entities.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*entities.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCharacterMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCharacter)(nil).Get), arg0)
}

// List mocks base method
func (m *MockCharacter) List(arg0 *entities.Account) ([]*entities.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*entities.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCharacterMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCharacter)(nil).List), arg0)
}

// MockAccount is a mock of Account interface
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// GetByName mocks base method
func (m *MockAccount) GetByName(arg0 string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockAccountMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockAccount)(nil).GetByName), arg0)
}

// SetAuthKey mocks base method
func (m *MockAccount) SetAuthKey(arg0 *entities.Account, arg1 customtypes.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAuthKey indicates an expected call of SetAuthKey
func (mr *MockAccountMockRecorder) SetAuthKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthKey", reflect.TypeOf((*MockAccount)(nil).SetAuthKey), arg0, arg1)
}

// MockGameCharacter is a mock of GameCharacter interface
type MockGameCharacter struct {
	ctrl     *gomock.Controller
	recorder *MockGameCharacterMockRecorder
}

// MockGameCharacterMockRecorder is the mock recorder for MockGameCharacter
type MockGameCharacterMockRecorder struct {
	mock *MockGameCharacter
}

// NewMockGameCharacter creates a new mock instance
func NewMockGameCharacter(ctrl *gomock.Controller) *MockGameCharacter {
	mock := &MockGameCharacter{ctrl: ctrl}
	mock.recorder = &MockGameCharacterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameCharacter) EXPECT() *MockGameCharacterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockGameCharacter) Delete(arg0 customtypes.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGameCharacterMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGameCharacter)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockGameCharacter) Get(arg0 customtypes.ID) (interfaces.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interfaces.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGameCharacterMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGameCharacter)(nil).Get), arg0)
}

// GetAround mocks base method
func (m *MockGameCharacter) GetAround(arg0 customtypes.ID) ([]interfaces.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAround", arg0)
	ret0, _ := ret[0].([]interfaces.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAround indicates an expected call of GetAround
func (mr *MockGameCharacterMockRecorder) GetAround(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAround", reflect.TypeOf((*MockGameCharacter)(nil).GetAround), arg0)
}

// GetSameMap mocks base method
func (m *MockGameCharacter) GetSameMap(arg0 customtypes.ID) ([]interfaces.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSameMap", arg0)
	ret0, _ := ret[0].([]interfaces.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSameMap indicates an expected call of GetSameMap
func (mr *MockGameCharacterMockRecorder) GetSameMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSameMap", reflect.TypeOf((*MockGameCharacter)(nil).GetSameMap), arg0)
}

// Save mocks base method
func (m *MockGameCharacter) Save(arg0 interfaces.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockGameCharacterMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGameCharacter)(nil).Save), arg0)
}
