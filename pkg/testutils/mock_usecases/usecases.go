// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/steve-nzr/goff/internal/domain/interfaces/usecases (interfaces: Welcome,Login,CharacterList)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	gomock "github.com/golang/mock/gomock"
	customtypes "github.com/steve-nzr/goff/internal/domain/customtypes"
	entities "github.com/steve-nzr/goff/internal/domain/entities"
	models "github.com/steve-nzr/goff/internal/models"
	abstract "github.com/steve-nzr/goff/pkg/abstract"
	reflect "reflect"
)

// MockWelcome is a mock of Welcome interface
type MockWelcome struct {
	ctrl     *gomock.Controller
	recorder *MockWelcomeMockRecorder
}

// MockWelcomeMockRecorder is the mock recorder for MockWelcome
type MockWelcomeMockRecorder struct {
	mock *MockWelcome
}

// NewMockWelcome creates a new mock instance
func NewMockWelcome(ctrl *gomock.Controller) *MockWelcome {
	mock := &MockWelcome{ctrl: ctrl}
	mock.recorder = &MockWelcomeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWelcome) EXPECT() *MockWelcomeMockRecorder {
	return m.recorder
}

// Greet mocks base method
func (m *MockWelcome) Greet() (customtypes.ID, abstract.Serializable) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Greet")
	ret0, _ := ret[0].(customtypes.ID)
	ret1, _ := ret[1].(abstract.Serializable)
	return ret0, ret1
}

// Greet indicates an expected call of Greet
func (mr *MockWelcomeMockRecorder) Greet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greet", reflect.TypeOf((*MockWelcome)(nil).Greet))
}

// MockLogin is a mock of Login interface
type MockLogin struct {
	ctrl     *gomock.Controller
	recorder *MockLoginMockRecorder
}

// MockLoginMockRecorder is the mock recorder for MockLogin
type MockLoginMockRecorder struct {
	mock *MockLogin
}

// NewMockLogin creates a new mock instance
func NewMockLogin(ctrl *gomock.Controller) *MockLogin {
	mock := &MockLogin{ctrl: ctrl}
	mock.recorder = &MockLoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogin) EXPECT() *MockLoginMockRecorder {
	return m.recorder
}

// ListServers mocks base method
func (m *MockLogin) ListServers(arg0 *entities.Account) *models.UseCaseResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", arg0)
	ret0, _ := ret[0].(*models.UseCaseResponse)
	return ret0
}

// ListServers indicates an expected call of ListServers
func (mr *MockLoginMockRecorder) ListServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockLogin)(nil).ListServers), arg0)
}

// ValidateCredentials mocks base method
func (m *MockLogin) ValidateCredentials(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCredentials", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCredentials indicates an expected call of ValidateCredentials
func (mr *MockLoginMockRecorder) ValidateCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredentials", reflect.TypeOf((*MockLogin)(nil).ValidateCredentials), arg0, arg1)
}

// MockCharacterList is a mock of CharacterList interface
type MockCharacterList struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterListMockRecorder
}

// MockCharacterListMockRecorder is the mock recorder for MockCharacterList
type MockCharacterListMockRecorder struct {
	mock *MockCharacterList
}

// NewMockCharacterList creates a new mock instance
func NewMockCharacterList(ctrl *gomock.Controller) *MockCharacterList {
	mock := &MockCharacterList{ctrl: ctrl}
	mock.recorder = &MockCharacterListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCharacterList) EXPECT() *MockCharacterListMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCharacterList) Create() abstract.Serializable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(abstract.Serializable)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCharacterListMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCharacterList)(nil).Create))
}

// Delete mocks base method
func (m *MockCharacterList) Delete(arg0 *entities.Account, arg1 customtypes.ID) abstract.Serializable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(abstract.Serializable)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCharacterListMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCharacterList)(nil).Delete), arg0, arg1)
}

// GetWorldAddress mocks base method
func (m *MockCharacterList) GetWorldAddress() abstract.Serializable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldAddress")
	ret0, _ := ret[0].(abstract.Serializable)
	return ret0
}

// GetWorldAddress indicates an expected call of GetWorldAddress
func (mr *MockCharacterListMockRecorder) GetWorldAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldAddress", reflect.TypeOf((*MockCharacterList)(nil).GetWorldAddress))
}

// List mocks base method
func (m *MockCharacterList) List(arg0 *entities.Account) *models.UseCaseResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*models.UseCaseResponse)
	return ret0
}

// List indicates an expected call of List
func (mr *MockCharacterListMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCharacterList)(nil).List), arg0)
}
